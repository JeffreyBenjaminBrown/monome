* TODO solve, then test
** hold a note, press sustain, release the note
* TODO create voices on the fly
** TODO use nextVoice
Monome.Util.nextVoice :: M.Map VoiceId a -> VoiceId
** TODO use something other than pairs for voiceId
** PITFALLS
Create it before telling it to do something.
  Or else create it with those parameters.
Kill it after silencing it.
** how: sub-tasks
Monome.Util.nextVoice :: M.Map VoiceId a -> VoiceId
** how: loops
*** when a key is pressed
Ignore whether anything is sustaining, chords are playing, etc.
Get a new voiceId.
Create a voice with that ID and default parameters.
Send control messages as normal to it.
*** when a key is released
Look up whether it is sustained.
If not, turn it off, then kill it.
*** when a chord is sustained
Nothing different?
*** when a chord is released
in addition to "off", send "kill"
** optimize ? No need to turn it off.
** Vivid: voice creation, use and deletion
use "synth" to make a synth, "free" to free it:
  s <- synth boop ()
  set s (toI f :: I "amp")
  free s
* TODO sustained pitches should not disable keys
** after spatial drift
Currently, because each voice is identified with a key,
if that voice is sustained, that key cannot sound a new note,
even when it no longer represents the same pitch.
** ? or at all
* TODO features
** two keyboards, split keyboard
** timbre control, store timbre
** sustain: two buttons, "add these" and "release all"
"add these" has on/off state, stays in effect until it is released.
"release all" has no state -- it fires as soon as it's touched, and holding it does nothing.
** store pitchsets from sustain
** transpose {pitchsets, ongoing notes, either keyboard}
** make pitchsets available on a per-degree basis
** ? timbre-xy interaction
higher tones are harsher
rightward tones are (warblier?)
** redraw the whole screen often
*** why
Dropped messages to LEDs stop being a (hypothetical) problem.
Shading on both monomes becomes easier.
** flash the anchor
** volume, timbre control for {sustained notes, either keyboard}
** reset buttons
*** silence all voices
*** redraw entire grid
*** ? restore shift to identity vector
to remove floating point error
** sustain to middle of bottom, and duplicate at both top corners
so that usually something can touch it
* infrastructure
** add tests
*** TODO test multiple handlers
**** hold 2 notes, press sustain, shift, release one of them
**** hold 2 notes, press sustain, shift, release one of them, release sustain
**** hold a note, shift, press another note, press sustain
**** hold a note, shift, press another note, press sustain, release them
** LedBecause: maybe don't distinguish between keys and sustain
 just use VoiceId
* Montevideo - Monome Tidal Vivid
esp. for looping
* separate projects
** separate Vivid.Jbb from Vivid
this will make starting the repl faster
** separate my own Vivid projects
*** namely these
Vivid (clone, for reference)
Vivid.Synths.Jbb
Vivid.Dispatch
Monome
*** use symlinks between them as needed
e.g. from Monome to Synths
