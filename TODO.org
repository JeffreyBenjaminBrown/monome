These are pretty well ordered by dependency.
* TODO isolate IO
** why
It will make using multiple monomes easier.
  Launch two separate et31 instances, one for each monome.
  Launch a single routine that receives from those and sends to Vivid.
It will make adding flashing LEDs easier.
It will make testing easier.
  For instance, the handlers could be pure.
** how: Sound X Video
*** In sound, rather than sending to SC,
change the state to have a collection of messages to send.
* TODO add tests
* TODO improve the St type
** why
It will make decoupoling voices from keys possible.
  Which will allow me to solve the bug where keys become inactive
  due to sustain after spatial drift.
It will make creating voices on the fly easier.
  Which will allow using fewer voices, better synths.
** how
*** Currently
 stVoices :: St -> M.Map (X,Y) (Synth BoopParams)
**** code that modifies voices
 Keyboard.soundKey :: St -> ((X,Y), Switch) -> IO ()
   To modify a voice., it looks up the voice in stVoices.
 Sustain.quiet xy = do set ((M.!) (stVoices st) xy) (0 :: I "amp")
                       mapM_ quiet voicesToSilence
**** types
 St = ...
   stVoices :: M.Map (X,Y) (Synth BoopParams)
   stFingers :: M.Map (X,Y) PitchClass -- should be pitch, not pitch class
   stLit :: LitPitches = Map PitchClass (Set LedBecause)
   stSustained :: S.Set ((X,Y), PitchClass) -- should just be a voice ID
*** Instead
 type VoiceId = Int -- in Types/State.hs, its only meaningful context.
 data St = ...
   stVoices  :: Map VoiceId (Synth BoopParams).
   stFingers :: Map (X,Y) Pitch
   stSustained :: S.Set VoiceID
* TODO sustained pitches should not disable keys after spatial drift
Currently, because each voice is identified with a key,
if that voice is sustained, that key cannot sound a new note,
even when it no longer represents the same pitch.
* TODO flash the anchor
* TODO dependentPitchClass should not exist
* TODO sustain: two buttons, "add these" and "release all"
"add these" stays in effect until it is released.
"release all" works as soon as it's touched; holding on it does nothing.
* Montevideo - Monome Tidal Vivid
** Things to represent on the monome
synth param
rhythm
chord
melody
* TODO maybe
** sustain to middle of bottom, and duplicate at both top corners
 so that usually something can touch it
* features
** show sustained notes
** add to ongoing sustained group
** transpose ongoing notes
** save to chord bank from sustain
** sustained voices do not block keys
** sustain these and future
This is what most piano sustain pedals do.
** loop bank
** volume control for sustained notes
** timbre
** split keyboard
** reset buttons
*** silence all voices
*** redraw entire grid
*** restore shift to 1
to remove floating point error
* separate projects
** separate Vivid.Jbb from Vivid
 this will make starting the repl faster
** separate my own Vivid projects
*** namely these
Vivid (clone, for reference)
Vivid.Synths.Jbb
Vivid.Dispatch
Monome
*** use symlinks between them as needed
e.g. from Monome to Synths
